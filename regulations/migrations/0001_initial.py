# Generated by Django 4.1.1 on 2022-11-11 12:33

import ckeditor.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("identifier", models.IntegerField()),
                ("name", models.CharField(max_length=256)),
                ("part", models.IntegerField(null=True)),
                ("date_created", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("date_updated", models.DateTimeField(auto_now=True, db_index=True)),
            ],
            options={
                "verbose_name": "category",
                "verbose_name_plural": "categories",
            },
        ),
        migrations.CreateModel(
            name="Paragraph",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("path", models.CharField(max_length=255, unique=True)),
                ("depth", models.PositiveIntegerField()),
                ("numchild", models.PositiveIntegerField(default=0)),
                ("code", models.CharField(default="-", max_length=256)),
                (
                    "note_type",
                    models.CharField(
                        choices=[
                            ("base", "Non-note paragraph"),
                            ("note", "Note"),
                            ("nota_bene", "N.B."),
                            ("technical_note", "Technical Note"),
                        ],
                        default="base",
                        max_length=256,
                    ),
                ),
                ("text", ckeditor.fields.RichTextField()),
                ("is_public", models.BooleanField(default=True)),
                ("date_created", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("date_updated", models.DateTimeField(auto_now=True, db_index=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Regime",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=256)),
                ("number_range_min", models.IntegerField(unique=True)),
                ("number_range_max", models.IntegerField(unique=True)),
                ("date_created", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("date_updated", models.DateTimeField(auto_now=True, db_index=True)),
            ],
        ),
        migrations.CreateModel(
            name="SubCategory",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("identifier", models.CharField(max_length=256, unique=True)),
                ("name", models.CharField(max_length=256)),
                ("date_created", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("date_updated", models.DateTimeField(auto_now=True, db_index=True)),
            ],
            options={
                "verbose_name": "subcategory",
                "verbose_name_plural": "subcategories",
            },
        ),
        migrations.CreateModel(
            name="Regulation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("code", models.CharField(max_length=256, null=True, unique=True)),
                ("date_created", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("date_updated", models.DateTimeField(auto_now=True, db_index=True)),
                ("category", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="regulations.category")),
                ("regime", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="regulations.regime")),
                (
                    "sub_category",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="regulations.subcategory"),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="regime",
            constraint=models.CheckConstraint(
                check=models.Q(("number_range_min__lt", models.F("number_range_max"))),
                name="number_range_min_less_than_max",
            ),
        ),
        migrations.AddField(
            model_name="paragraph",
            name="category",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="paragraphs",
                to="regulations.category",
            ),
        ),
        migrations.AddField(
            model_name="paragraph",
            name="regulation",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="paragraphs",
                to="regulations.regulation",
            ),
        ),
        migrations.AddField(
            model_name="paragraph",
            name="sub_category",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="paragraphs",
                to="regulations.subcategory",
            ),
        ),
    ]
